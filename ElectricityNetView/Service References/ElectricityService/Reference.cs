//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18051
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ElectricityNetView.ElectricityService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LogUser", Namespace="http://schemas.datacontract.org/2004/07/ElectricityWcfService")]
    [System.SerializableAttribute()]
    public partial class LogUser : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ActionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Action {
            get {
                return this.ActionField;
            }
            set {
                if ((object.ReferenceEquals(this.ActionField, value) != true)) {
                    this.ActionField = value;
                    this.RaisePropertyChanged("Action");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Time {
            get {
                return this.TimeField;
            }
            set {
                if ((this.TimeField.Equals(value) != true)) {
                    this.TimeField = value;
                    this.RaisePropertyChanged("Time");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserID {
            get {
                return this.UserIDField;
            }
            set {
                if ((this.UserIDField.Equals(value) != true)) {
                    this.UserIDField = value;
                    this.RaisePropertyChanged("UserID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConfigLineInformation", Namespace="http://schemas.datacontract.org/2004/07/ElectricityWcfService")]
    [System.SerializableAttribute()]
    public partial class ConfigLineInformation : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LineNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double RatedCurrentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StationID_EndField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StationID_StartField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double VoltageLevelField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LineName {
            get {
                return this.LineNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LineNameField, value) != true)) {
                    this.LineNameField = value;
                    this.RaisePropertyChanged("LineName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double RatedCurrent {
            get {
                return this.RatedCurrentField;
            }
            set {
                if ((this.RatedCurrentField.Equals(value) != true)) {
                    this.RatedCurrentField = value;
                    this.RaisePropertyChanged("RatedCurrent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StationID_End {
            get {
                return this.StationID_EndField;
            }
            set {
                if ((this.StationID_EndField.Equals(value) != true)) {
                    this.StationID_EndField = value;
                    this.RaisePropertyChanged("StationID_End");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StationID_Start {
            get {
                return this.StationID_StartField;
            }
            set {
                if ((this.StationID_StartField.Equals(value) != true)) {
                    this.StationID_StartField = value;
                    this.RaisePropertyChanged("StationID_Start");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double VoltageLevel {
            get {
                return this.VoltageLevelField;
            }
            set {
                if ((this.VoltageLevelField.Equals(value) != true)) {
                    this.VoltageLevelField = value;
                    this.RaisePropertyChanged("VoltageLevel");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConfigStationInformation", Namespace="http://schemas.datacontract.org/2004/07/ElectricityWcfService")]
    [System.SerializableAttribute()]
    public partial class ConfigStationInformation : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime BuildTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double InstallCapacityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LatitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LongitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StationNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double VoltageLevelField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime BuildTime {
            get {
                return this.BuildTimeField;
            }
            set {
                if ((this.BuildTimeField.Equals(value) != true)) {
                    this.BuildTimeField = value;
                    this.RaisePropertyChanged("BuildTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double InstallCapacity {
            get {
                return this.InstallCapacityField;
            }
            set {
                if ((this.InstallCapacityField.Equals(value) != true)) {
                    this.InstallCapacityField = value;
                    this.RaisePropertyChanged("InstallCapacity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Latitude {
            get {
                return this.LatitudeField;
            }
            set {
                if ((this.LatitudeField.Equals(value) != true)) {
                    this.LatitudeField = value;
                    this.RaisePropertyChanged("Latitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Longitude {
            get {
                return this.LongitudeField;
            }
            set {
                if ((this.LongitudeField.Equals(value) != true)) {
                    this.LongitudeField = value;
                    this.RaisePropertyChanged("Longitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StationName {
            get {
                return this.StationNameField;
            }
            set {
                if ((object.ReferenceEquals(this.StationNameField, value) != true)) {
                    this.StationNameField = value;
                    this.RaisePropertyChanged("StationName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double VoltageLevel {
            get {
                return this.VoltageLevelField;
            }
            set {
                if ((this.VoltageLevelField.Equals(value) != true)) {
                    this.VoltageLevelField = value;
                    this.RaisePropertyChanged("VoltageLevel");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RuntimeLineData", Namespace="http://schemas.datacontract.org/2004/07/ElectricityWcfService")]
    [System.SerializableAttribute()]
    public partial class RuntimeLineData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LineIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LoadQuantityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TimeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LineID {
            get {
                return this.LineIDField;
            }
            set {
                if ((this.LineIDField.Equals(value) != true)) {
                    this.LineIDField = value;
                    this.RaisePropertyChanged("LineID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double LoadQuantity {
            get {
                return this.LoadQuantityField;
            }
            set {
                if ((this.LoadQuantityField.Equals(value) != true)) {
                    this.LoadQuantityField = value;
                    this.RaisePropertyChanged("LoadQuantity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Time {
            get {
                return this.TimeField;
            }
            set {
                if ((this.TimeField.Equals(value) != true)) {
                    this.TimeField = value;
                    this.RaisePropertyChanged("Time");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RuntimeStationData", Namespace="http://schemas.datacontract.org/2004/07/ElectricityWcfService")]
    [System.SerializableAttribute()]
    public partial class RuntimeStationData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ActivePowerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ReactivePowerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StationIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TimeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double ActivePower {
            get {
                return this.ActivePowerField;
            }
            set {
                if ((this.ActivePowerField.Equals(value) != true)) {
                    this.ActivePowerField = value;
                    this.RaisePropertyChanged("ActivePower");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double ReactivePower {
            get {
                return this.ReactivePowerField;
            }
            set {
                if ((this.ReactivePowerField.Equals(value) != true)) {
                    this.ReactivePowerField = value;
                    this.RaisePropertyChanged("ReactivePower");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StationID {
            get {
                return this.StationIDField;
            }
            set {
                if ((this.StationIDField.Equals(value) != true)) {
                    this.StationIDField = value;
                    this.RaisePropertyChanged("StationID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Time {
            get {
                return this.TimeField;
            }
            set {
                if ((this.TimeField.Equals(value) != true)) {
                    this.TimeField = value;
                    this.RaisePropertyChanged("Time");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ForecastDayStationData", Namespace="http://schemas.datacontract.org/2004/07/ElectricityWcfService")]
    [System.SerializableAttribute()]
    public partial class ForecastDayStationData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ActivePowerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ForecastTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ReactivePowerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StationIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TimeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double ActivePower {
            get {
                return this.ActivePowerField;
            }
            set {
                if ((this.ActivePowerField.Equals(value) != true)) {
                    this.ActivePowerField = value;
                    this.RaisePropertyChanged("ActivePower");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ForecastType {
            get {
                return this.ForecastTypeField;
            }
            set {
                if ((this.ForecastTypeField.Equals(value) != true)) {
                    this.ForecastTypeField = value;
                    this.RaisePropertyChanged("ForecastType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double ReactivePower {
            get {
                return this.ReactivePowerField;
            }
            set {
                if ((this.ReactivePowerField.Equals(value) != true)) {
                    this.ReactivePowerField = value;
                    this.RaisePropertyChanged("ReactivePower");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StationID {
            get {
                return this.StationIDField;
            }
            set {
                if ((this.StationIDField.Equals(value) != true)) {
                    this.StationIDField = value;
                    this.RaisePropertyChanged("StationID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Time {
            get {
                return this.TimeField;
            }
            set {
                if ((this.TimeField.Equals(value) != true)) {
                    this.TimeField = value;
                    this.RaisePropertyChanged("Time");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ElectricityService.IElectricityService")]
    public interface IElectricityService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricityService/AddLogUser", ReplyAction="http://tempuri.org/IElectricityService/AddLogUserResponse")]
        int AddLogUser(ElectricityNetView.ElectricityService.LogUser Record);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricityService/AddLogUser", ReplyAction="http://tempuri.org/IElectricityService/AddLogUserResponse")]
        System.Threading.Tasks.Task<int> AddLogUserAsync(ElectricityNetView.ElectricityService.LogUser Record);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricityService/AddConfigLineInformation", ReplyAction="http://tempuri.org/IElectricityService/AddConfigLineInformationResponse")]
        int AddConfigLineInformation(ElectricityNetView.ElectricityService.ConfigLineInformation Record);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricityService/AddConfigLineInformation", ReplyAction="http://tempuri.org/IElectricityService/AddConfigLineInformationResponse")]
        System.Threading.Tasks.Task<int> AddConfigLineInformationAsync(ElectricityNetView.ElectricityService.ConfigLineInformation Record);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricityService/AddConfigStationInformation", ReplyAction="http://tempuri.org/IElectricityService/AddConfigStationInformationResponse")]
        int AddConfigStationInformation(ElectricityNetView.ElectricityService.ConfigStationInformation Record);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricityService/AddConfigStationInformation", ReplyAction="http://tempuri.org/IElectricityService/AddConfigStationInformationResponse")]
        System.Threading.Tasks.Task<int> AddConfigStationInformationAsync(ElectricityNetView.ElectricityService.ConfigStationInformation Record);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricityService/AddRuntimeLineData", ReplyAction="http://tempuri.org/IElectricityService/AddRuntimeLineDataResponse")]
        int AddRuntimeLineData(ElectricityNetView.ElectricityService.RuntimeLineData Record);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricityService/AddRuntimeLineData", ReplyAction="http://tempuri.org/IElectricityService/AddRuntimeLineDataResponse")]
        System.Threading.Tasks.Task<int> AddRuntimeLineDataAsync(ElectricityNetView.ElectricityService.RuntimeLineData Record);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricityService/AddRuntimeStationData", ReplyAction="http://tempuri.org/IElectricityService/AddRuntimeStationDataResponse")]
        int AddRuntimeStationData(ElectricityNetView.ElectricityService.RuntimeStationData Record);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricityService/AddRuntimeStationData", ReplyAction="http://tempuri.org/IElectricityService/AddRuntimeStationDataResponse")]
        System.Threading.Tasks.Task<int> AddRuntimeStationDataAsync(ElectricityNetView.ElectricityService.RuntimeStationData Record);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricityService/AddForecastDayStationData", ReplyAction="http://tempuri.org/IElectricityService/AddForecastDayStationDataResponse")]
        int AddForecastDayStationData(ElectricityNetView.ElectricityService.ForecastDayStationData Record);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricityService/AddForecastDayStationData", ReplyAction="http://tempuri.org/IElectricityService/AddForecastDayStationDataResponse")]
        System.Threading.Tasks.Task<int> AddForecastDayStationDataAsync(ElectricityNetView.ElectricityService.ForecastDayStationData Record);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricityService/FindLogUser", ReplyAction="http://tempuri.org/IElectricityService/FindLogUserResponse")]
        ElectricityNetView.ElectricityService.LogUser FindLogUser(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricityService/FindLogUser", ReplyAction="http://tempuri.org/IElectricityService/FindLogUserResponse")]
        System.Threading.Tasks.Task<ElectricityNetView.ElectricityService.LogUser> FindLogUserAsync(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricityService/FindConfigLineInformation", ReplyAction="http://tempuri.org/IElectricityService/FindConfigLineInformationResponse")]
        ElectricityNetView.ElectricityService.ConfigLineInformation FindConfigLineInformation(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricityService/FindConfigLineInformation", ReplyAction="http://tempuri.org/IElectricityService/FindConfigLineInformationResponse")]
        System.Threading.Tasks.Task<ElectricityNetView.ElectricityService.ConfigLineInformation> FindConfigLineInformationAsync(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricityService/FindConfigStationInformation", ReplyAction="http://tempuri.org/IElectricityService/FindConfigStationInformationResponse")]
        ElectricityNetView.ElectricityService.ConfigStationInformation FindConfigStationInformation(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricityService/FindConfigStationInformation", ReplyAction="http://tempuri.org/IElectricityService/FindConfigStationInformationResponse")]
        System.Threading.Tasks.Task<ElectricityNetView.ElectricityService.ConfigStationInformation> FindConfigStationInformationAsync(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricityService/FindConfigStationInformationByStationName", ReplyAction="http://tempuri.org/IElectricityService/FindConfigStationInformationByStationNameR" +
            "esponse")]
        ElectricityNetView.ElectricityService.ConfigStationInformation FindConfigStationInformationByStationName(string StationName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricityService/FindConfigStationInformationByStationName", ReplyAction="http://tempuri.org/IElectricityService/FindConfigStationInformationByStationNameR" +
            "esponse")]
        System.Threading.Tasks.Task<ElectricityNetView.ElectricityService.ConfigStationInformation> FindConfigStationInformationByStationNameAsync(string StationName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricityService/FindRuntimeLineData", ReplyAction="http://tempuri.org/IElectricityService/FindRuntimeLineDataResponse")]
        ElectricityNetView.ElectricityService.RuntimeLineData FindRuntimeLineData(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricityService/FindRuntimeLineData", ReplyAction="http://tempuri.org/IElectricityService/FindRuntimeLineDataResponse")]
        System.Threading.Tasks.Task<ElectricityNetView.ElectricityService.RuntimeLineData> FindRuntimeLineDataAsync(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricityService/FindRuntimeStationData", ReplyAction="http://tempuri.org/IElectricityService/FindRuntimeStationDataResponse")]
        ElectricityNetView.ElectricityService.RuntimeStationData FindRuntimeStationData(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricityService/FindRuntimeStationData", ReplyAction="http://tempuri.org/IElectricityService/FindRuntimeStationDataResponse")]
        System.Threading.Tasks.Task<ElectricityNetView.ElectricityService.RuntimeStationData> FindRuntimeStationDataAsync(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricityService/SelectConfigStationInformation", ReplyAction="http://tempuri.org/IElectricityService/SelectConfigStationInformationResponse")]
        ElectricityNetView.ElectricityService.ConfigStationInformation[] SelectConfigStationInformation();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricityService/SelectConfigStationInformation", ReplyAction="http://tempuri.org/IElectricityService/SelectConfigStationInformationResponse")]
        System.Threading.Tasks.Task<ElectricityNetView.ElectricityService.ConfigStationInformation[]> SelectConfigStationInformationAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricityService/SelectRuntimeStationData", ReplyAction="http://tempuri.org/IElectricityService/SelectRuntimeStationDataResponse")]
        ElectricityNetView.ElectricityService.RuntimeStationData[] SelectRuntimeStationData(int StationID, System.DateTime TargetDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricityService/SelectRuntimeStationData", ReplyAction="http://tempuri.org/IElectricityService/SelectRuntimeStationDataResponse")]
        System.Threading.Tasks.Task<ElectricityNetView.ElectricityService.RuntimeStationData[]> SelectRuntimeStationDataAsync(int StationID, System.DateTime TargetDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricityService/SelectForecastDayStationData", ReplyAction="http://tempuri.org/IElectricityService/SelectForecastDayStationDataResponse")]
        ElectricityNetView.ElectricityService.ForecastDayStationData[] SelectForecastDayStationData(int StationID, System.DateTime TargetDate, int Forecast);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricityService/SelectForecastDayStationData", ReplyAction="http://tempuri.org/IElectricityService/SelectForecastDayStationDataResponse")]
        System.Threading.Tasks.Task<ElectricityNetView.ElectricityService.ForecastDayStationData[]> SelectForecastDayStationDataAsync(int StationID, System.DateTime TargetDate, int Forecast);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricityService/UpdateRuntimeStationData", ReplyAction="http://tempuri.org/IElectricityService/UpdateRuntimeStationDataResponse")]
        ElectricityNetView.ElectricityService.RuntimeStationData[] UpdateRuntimeStationData(int StartID, int StationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricityService/UpdateRuntimeStationData", ReplyAction="http://tempuri.org/IElectricityService/UpdateRuntimeStationDataResponse")]
        System.Threading.Tasks.Task<ElectricityNetView.ElectricityService.RuntimeStationData[]> UpdateRuntimeStationDataAsync(int StartID, int StationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricityService/StationAlert", ReplyAction="http://tempuri.org/IElectricityService/StationAlertResponse")]
        void StationAlert(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricityService/StationAlert", ReplyAction="http://tempuri.org/IElectricityService/StationAlertResponse")]
        System.Threading.Tasks.Task StationAlertAsync(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricityService/Forecast", ReplyAction="http://tempuri.org/IElectricityService/ForecastResponse")]
        void Forecast(int StationID, System.DateTime TargetDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IElectricityService/Forecast", ReplyAction="http://tempuri.org/IElectricityService/ForecastResponse")]
        System.Threading.Tasks.Task ForecastAsync(int StationID, System.DateTime TargetDate);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IElectricityServiceChannel : ElectricityNetView.ElectricityService.IElectricityService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ElectricityServiceClient : System.ServiceModel.ClientBase<ElectricityNetView.ElectricityService.IElectricityService>, ElectricityNetView.ElectricityService.IElectricityService {
        
        public ElectricityServiceClient() {
        }
        
        public ElectricityServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ElectricityServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ElectricityServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ElectricityServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int AddLogUser(ElectricityNetView.ElectricityService.LogUser Record) {
            return base.Channel.AddLogUser(Record);
        }
        
        public System.Threading.Tasks.Task<int> AddLogUserAsync(ElectricityNetView.ElectricityService.LogUser Record) {
            return base.Channel.AddLogUserAsync(Record);
        }
        
        public int AddConfigLineInformation(ElectricityNetView.ElectricityService.ConfigLineInformation Record) {
            return base.Channel.AddConfigLineInformation(Record);
        }
        
        public System.Threading.Tasks.Task<int> AddConfigLineInformationAsync(ElectricityNetView.ElectricityService.ConfigLineInformation Record) {
            return base.Channel.AddConfigLineInformationAsync(Record);
        }
        
        public int AddConfigStationInformation(ElectricityNetView.ElectricityService.ConfigStationInformation Record) {
            return base.Channel.AddConfigStationInformation(Record);
        }
        
        public System.Threading.Tasks.Task<int> AddConfigStationInformationAsync(ElectricityNetView.ElectricityService.ConfigStationInformation Record) {
            return base.Channel.AddConfigStationInformationAsync(Record);
        }
        
        public int AddRuntimeLineData(ElectricityNetView.ElectricityService.RuntimeLineData Record) {
            return base.Channel.AddRuntimeLineData(Record);
        }
        
        public System.Threading.Tasks.Task<int> AddRuntimeLineDataAsync(ElectricityNetView.ElectricityService.RuntimeLineData Record) {
            return base.Channel.AddRuntimeLineDataAsync(Record);
        }
        
        public int AddRuntimeStationData(ElectricityNetView.ElectricityService.RuntimeStationData Record) {
            return base.Channel.AddRuntimeStationData(Record);
        }
        
        public System.Threading.Tasks.Task<int> AddRuntimeStationDataAsync(ElectricityNetView.ElectricityService.RuntimeStationData Record) {
            return base.Channel.AddRuntimeStationDataAsync(Record);
        }
        
        public int AddForecastDayStationData(ElectricityNetView.ElectricityService.ForecastDayStationData Record) {
            return base.Channel.AddForecastDayStationData(Record);
        }
        
        public System.Threading.Tasks.Task<int> AddForecastDayStationDataAsync(ElectricityNetView.ElectricityService.ForecastDayStationData Record) {
            return base.Channel.AddForecastDayStationDataAsync(Record);
        }
        
        public ElectricityNetView.ElectricityService.LogUser FindLogUser(int ID) {
            return base.Channel.FindLogUser(ID);
        }
        
        public System.Threading.Tasks.Task<ElectricityNetView.ElectricityService.LogUser> FindLogUserAsync(int ID) {
            return base.Channel.FindLogUserAsync(ID);
        }
        
        public ElectricityNetView.ElectricityService.ConfigLineInformation FindConfigLineInformation(int ID) {
            return base.Channel.FindConfigLineInformation(ID);
        }
        
        public System.Threading.Tasks.Task<ElectricityNetView.ElectricityService.ConfigLineInformation> FindConfigLineInformationAsync(int ID) {
            return base.Channel.FindConfigLineInformationAsync(ID);
        }
        
        public ElectricityNetView.ElectricityService.ConfigStationInformation FindConfigStationInformation(int ID) {
            return base.Channel.FindConfigStationInformation(ID);
        }
        
        public System.Threading.Tasks.Task<ElectricityNetView.ElectricityService.ConfigStationInformation> FindConfigStationInformationAsync(int ID) {
            return base.Channel.FindConfigStationInformationAsync(ID);
        }
        
        public ElectricityNetView.ElectricityService.ConfigStationInformation FindConfigStationInformationByStationName(string StationName) {
            return base.Channel.FindConfigStationInformationByStationName(StationName);
        }
        
        public System.Threading.Tasks.Task<ElectricityNetView.ElectricityService.ConfigStationInformation> FindConfigStationInformationByStationNameAsync(string StationName) {
            return base.Channel.FindConfigStationInformationByStationNameAsync(StationName);
        }
        
        public ElectricityNetView.ElectricityService.RuntimeLineData FindRuntimeLineData(int ID) {
            return base.Channel.FindRuntimeLineData(ID);
        }
        
        public System.Threading.Tasks.Task<ElectricityNetView.ElectricityService.RuntimeLineData> FindRuntimeLineDataAsync(int ID) {
            return base.Channel.FindRuntimeLineDataAsync(ID);
        }
        
        public ElectricityNetView.ElectricityService.RuntimeStationData FindRuntimeStationData(int ID) {
            return base.Channel.FindRuntimeStationData(ID);
        }
        
        public System.Threading.Tasks.Task<ElectricityNetView.ElectricityService.RuntimeStationData> FindRuntimeStationDataAsync(int ID) {
            return base.Channel.FindRuntimeStationDataAsync(ID);
        }
        
        public ElectricityNetView.ElectricityService.ConfigStationInformation[] SelectConfigStationInformation() {
            return base.Channel.SelectConfigStationInformation();
        }
        
        public System.Threading.Tasks.Task<ElectricityNetView.ElectricityService.ConfigStationInformation[]> SelectConfigStationInformationAsync() {
            return base.Channel.SelectConfigStationInformationAsync();
        }
        
        public ElectricityNetView.ElectricityService.RuntimeStationData[] SelectRuntimeStationData(int StationID, System.DateTime TargetDate) {
            return base.Channel.SelectRuntimeStationData(StationID, TargetDate);
        }
        
        public System.Threading.Tasks.Task<ElectricityNetView.ElectricityService.RuntimeStationData[]> SelectRuntimeStationDataAsync(int StationID, System.DateTime TargetDate) {
            return base.Channel.SelectRuntimeStationDataAsync(StationID, TargetDate);
        }
        
        public ElectricityNetView.ElectricityService.ForecastDayStationData[] SelectForecastDayStationData(int StationID, System.DateTime TargetDate, int Forecast) {
            return base.Channel.SelectForecastDayStationData(StationID, TargetDate, Forecast);
        }
        
        public System.Threading.Tasks.Task<ElectricityNetView.ElectricityService.ForecastDayStationData[]> SelectForecastDayStationDataAsync(int StationID, System.DateTime TargetDate, int Forecast) {
            return base.Channel.SelectForecastDayStationDataAsync(StationID, TargetDate, Forecast);
        }
        
        public ElectricityNetView.ElectricityService.RuntimeStationData[] UpdateRuntimeStationData(int StartID, int StationID) {
            return base.Channel.UpdateRuntimeStationData(StartID, StationID);
        }
        
        public System.Threading.Tasks.Task<ElectricityNetView.ElectricityService.RuntimeStationData[]> UpdateRuntimeStationDataAsync(int StartID, int StationID) {
            return base.Channel.UpdateRuntimeStationDataAsync(StartID, StationID);
        }
        
        public void StationAlert(int ID) {
            base.Channel.StationAlert(ID);
        }
        
        public System.Threading.Tasks.Task StationAlertAsync(int ID) {
            return base.Channel.StationAlertAsync(ID);
        }
        
        public void Forecast(int StationID, System.DateTime TargetDate) {
            base.Channel.Forecast(StationID, TargetDate);
        }
        
        public System.Threading.Tasks.Task ForecastAsync(int StationID, System.DateTime TargetDate) {
            return base.Channel.ForecastAsync(StationID, TargetDate);
        }
    }
}
